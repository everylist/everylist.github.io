{"version":3,"sources":["comp/navbar/Navbar.js","comp/lists/Lists.js","comp/layout/Layout.js","t.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","toggleOffcanvas","bind","state","offcanvas","this","setState","t","app","className","href","icon","faListAlt","type","data-toggle","onClick","id","placeholder","aria-label","React","Component","Lists","lists","loadLists","db","collection","find","limit","asArray","then","map","item","i","_id","Layout","role","language","navigator","substr","resources","en","de","fr","es","it","text","App","user","setupStitch","appId","client","Stitch","hasAppClient","getAppClient","initializeAppClient","auth","hasRedirectResult","handleRedirectResult","catch","console","error","isLoggedIn","getServiceClient","RemoteMongoClient","factory","loginWithRedirect","GoogleRedirectCredential","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7ea9671.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faListAlt } from '@fortawesome/free-solid-svg-icons'\nimport './Navbar.css';\n\nclass Navbar extends React.Component {\n\n    /**\n     *\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        this.toggleOffcanvas = this.toggleOffcanvas.bind(this);\n        this.state = { offcanvas: false };\n    }\n\n    /**\n     *\n     */\n    toggleOffcanvas() {\n        this.setState({ offcanvas: !this.state.offcanvas });\n    }\n\n    /**\n     *\n     * @returns {XML}\n     */\n    render() {\n        const t = this.props.app.t\n        return (\n            <nav className=\"navbar navbar-expand-md fixed-top navbar-dark bg-dark\">\n                <a className={\"navbar-brand\"} href=\"#goto\"><FontAwesomeIcon icon={faListAlt} /> EveryList</a>\n                <button className=\"navbar-toggler p-0 border-0\" type=\"button\" data-toggle=\"offcanvas\" onClick={this.toggleOffcanvas}>\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n\n                <div className={\"navbar-collapse offcanvas-collapse \" + (this.state.offcanvas ? 'open' : '')} id=\"navbarsExampleDefault\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item active\">\n                            <a className=\"nav-link\" href=\"#goto\">{t('My Lists')}</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#goto\">{t('Create New List')}</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#goto\">{t('Update My Lists')}</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"#goto\">{t('Log Out')}</a>\n                        </li>\n                    </ul>\n                    <form className=\"form-inline my-2 my-lg-0\">\n                        <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\"/>\n                        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n                    </form>\n                </div>\n            </nav>\n        )\n    }\n}\n\nexport default Navbar;\n","import React from 'react';\nimport './Lists.css';\n\nclass Lists extends React.Component {\n\n    /**\n     *\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        this.state = {lists: []};\n    }\n\n    /**\n     *\n     */\n    componentDidMount() {\n        this.loadLists();\n    }\n\n    /**\n     *\n     */\n    loadLists() {\n        if (this.props.app.db) {\n            this.props.app.db.collection('lists')\n                .find({}, {limit: 100})\n                .asArray()\n                .then(lists => {this.setState({ lists: lists })})\n        }\n    };\n\n    /**\n     *\n     * @returns {XML}\n     */\n    render() {\n        const t = this.props.app.t\n\n        const lists = this.state.lists.map((item, i) => (\n            <div>\n                <h1>{ item._id }</h1>\n            </div>\n        ));\n\n        return (\n            <div>\n                <div>{t('Cavallo')}</div>\n\n                {lists}\n            </div>\n        );\n    }\n}\n\nexport default Lists;\n","import React from 'react';\nimport Navbar from '../navbar/Navbar';\nimport Lists from '../lists/Lists';\nimport './Layout.css';\n\nclass Layout extends React.Component {\n\n    /**\n     *\n     * @returns {XML}\n     */\n    render() {\n        return (\n            <div>\n                <Navbar app={this.props.app} />\n\n                <main role=\"main\" className=\"container\">\n                    <Lists app={this.props.app} />\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default Layout;\n","import en from './lang/en'\nimport de from './lang/de'\nimport fr from './lang/fr'\nimport es from './lang/es'\nimport it from './lang/it'\n\nconst language = navigator.language ? navigator.language.substr(0, 2) : 'en'\nconst resources = {en, de, fr, es, it}\n\nfunction t(text) {\n    if (typeof resources[language]['translations'][text] === 'undefined') { return text }\n    return resources[language]['translations'][text]\n}\n\nexport default t\n","import React from 'react';\nimport { Stitch, RemoteMongoClient, GoogleRedirectCredential } from 'mongodb-stitch-browser-sdk';\nimport Layout from './comp/layout/Layout';\nimport t from './t';\nimport './App.css';\n\nclass App extends React.Component {\n\n    /**\n     *\n     * @param props\n     */\n    constructor(props) {\n        super(props)\n        this.state = { user: false, db: false, t }\n    }\n\n    /**\n     *\n     * @returns {Promise.<void>}\n     */\n    async componentDidMount() {\n        await this.setupStitch();\n    }\n\n    /**\n     *\n     * @returns {Promise.<void>}\n     */\n    async setupStitch() {\n        const appId = 'everylist-lvlrz';\n        const client = Stitch.hasAppClient(appId) ? Stitch.getAppClient(appId) : Stitch.initializeAppClient(appId);\n\n        if (client.auth.hasRedirectResult()) {\n            await client.auth.handleRedirectResult().catch(console.error);\n        }\n\n        if (client.auth.isLoggedIn) {\n            let user = client.auth.user;\n            let db = client.getServiceClient(RemoteMongoClient.factory, 'everylist').db('everylist');\n            this.setState({ user, db });\n        } else {\n            client.auth.loginWithRedirect(new GoogleRedirectCredential());\n        }\n    }\n\n    /**\n     *\n     * @returns {XML}\n     */\n    render() {\n        return (\n            <div className=\"App\">\n                <Layout app={this.state} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}